diff --git cef/include/capi/cef_browser_capi.h cef/include/capi/cef_browser_capi.h
index b5dd342e1..ca9a45e53 100644
--- cef/include/capi/cef_browser_capi.h
+++ cef/include/capi/cef_browser_capi.h
@@ -644,6 +644,8 @@ typedef struct _cef_browser_host_t {
   int(CEF_CALLBACK* is_window_rendering_disabled)(
       struct _cef_browser_host_t* self);
 
+  void*(CEF_CALLBACK* lock_frame)(struct _cef_browser_host_t* self);
+
   ///
   /// Notify the browser that the widget has been resized. The browser will
   /// first call cef_render_handler_t::GetViewRect to get the new size and then
diff --git cef/include/cef_browser.h cef/include/cef_browser.h
index 011e51271..7a7a4837c 100644
--- cef/include/cef_browser.h
+++ cef/include/cef_browser.h
@@ -676,6 +676,8 @@ class CefBrowserHost : public virtual CefBaseRefCounted {
   /*--cef()--*/
   virtual bool IsWindowRenderingDisabled() = 0;
 
+  virtual void* LockFrame() = 0;
+
   ///
   /// Notify the browser that the widget has been resized. The browser will
   /// first call CefRenderHandler::GetViewRect to get the new size and then call
diff --git cef/libcef/browser/alloy/alloy_browser_host_impl.cc cef/libcef/browser/alloy/alloy_browser_host_impl.cc
index d5ba002dc..d5204727c 100644
--- cef/libcef/browser/alloy/alloy_browser_host_impl.cc
+++ cef/libcef/browser/alloy/alloy_browser_host_impl.cc
@@ -13,6 +13,7 @@
 #include "base/functional/bind.h"
 #include "base/functional/callback_helpers.h"
 #include "cef/libcef/browser/alloy/browser_platform_delegate_alloy.h"
+#include "cef/libcef/browser/osr/browser_platform_delegate_osr.h"
 #include "cef/libcef/browser/audio_capturer.h"
 #include "cef/libcef/browser/browser_context.h"
 #include "cef/libcef/browser/browser_guest_util.h"
@@ -390,6 +391,13 @@ bool AlloyBrowserHostImpl::IsWindowRenderingDisabled() {
   return IsWindowless();
 }
 
+void* AlloyBrowserHostImpl::LockFrame() {
+    if (platform_delegate_) {
+        return static_cast<CefBrowserPlatformDelegateOsr*>(platform_delegate_.get())->LockFrame();
+    }
+    return nullptr;
+}
+
 void AlloyBrowserHostImpl::WasResized() {
   if (!CEF_CURRENTLY_ON_UIT()) {
     CEF_POST_TASK(CEF_UIT,
diff --git cef/libcef/browser/alloy/alloy_browser_host_impl.h cef/libcef/browser/alloy/alloy_browser_host_impl.h
index 6d3acc82e..f8be2d600 100644
--- cef/libcef/browser/alloy/alloy_browser_host_impl.h
+++ cef/libcef/browser/alloy/alloy_browser_host_impl.h
@@ -88,6 +88,7 @@ class AlloyBrowserHostImpl : public CefBrowserHostBase,
             bool findNext) override;
   void StopFinding(bool clearSelection) override;
   bool IsWindowRenderingDisabled() override;
+  void* LockFrame() override;
   void WasResized() override;
   void WasHidden(bool hidden) override;
   void NotifyScreenInfoChanged() override;
diff --git cef/libcef/browser/chrome/chrome_browser_host_impl.cc cef/libcef/browser/chrome/chrome_browser_host_impl.cc
index c3bd9766b..da71d3af8 100644
--- cef/libcef/browser/chrome/chrome_browser_host_impl.cc
+++ cef/libcef/browser/chrome/chrome_browser_host_impl.cc
@@ -8,6 +8,7 @@
 #include "base/notreached.h"
 #include "cef/libcef/browser/browser_platform_delegate.h"
 #include "cef/libcef/browser/chrome/browser_platform_delegate_chrome.h"
+#include "cef/libcef/browser/osr/browser_platform_delegate_osr.h"
 #include "cef/libcef/browser/chrome/views/chrome_browser_frame.h"
 #include "cef/libcef/browser/chrome/views/chrome_browser_view.h"
 #include "cef/libcef/browser/thread_util.h"
@@ -141,6 +142,13 @@ void ChromeBrowserHostImpl::OnWebContentsDestroyed(
   }
 }
 
+void* ChromeBrowserHostImpl::LockFrame() {
+    if (platform_delegate_) {
+        return static_cast<CefBrowserPlatformDelegateOsr*>(platform_delegate_.get())->LockFrame();
+    }
+    return nullptr;
+}
+
 void ChromeBrowserHostImpl::OnSetFocus(cef_focus_source_t source) {
   if (!CEF_CURRENTLY_ON_UIT()) {
     CEF_POST_TASK(CEF_UIT, base::BindOnce(&ChromeBrowserHostImpl::OnSetFocus,
diff --git cef/libcef/browser/chrome/chrome_browser_host_impl.h cef/libcef/browser/chrome/chrome_browser_host_impl.h
index 8d039ef13..ce424ce43 100644
--- cef/libcef/browser/chrome/chrome_browser_host_impl.h
+++ cef/libcef/browser/chrome/chrome_browser_host_impl.h
@@ -82,6 +82,7 @@ class ChromeBrowserHostImpl : public CefBrowserHostBase {
             bool findNext) override;
   void StopFinding(bool clearSelection) override;
   bool IsWindowRenderingDisabled() override { return false; }
+  void* LockFrame() override;
   void WasResized() override;
   void WasHidden(bool hidden) override;
   void NotifyScreenInfoChanged() override;
diff --git cef/libcef/browser/osr/browser_platform_delegate_osr.cc cef/libcef/browser/osr/browser_platform_delegate_osr.cc
index 57a152026..0defdce24 100644
--- cef/libcef/browser/osr/browser_platform_delegate_osr.cc
+++ cef/libcef/browser/osr/browser_platform_delegate_osr.cc
@@ -96,6 +96,14 @@ SkColor CefBrowserPlatformDelegateOsr::GetBackgroundColor() const {
   return native_delegate_->GetBackgroundColor();
 }
 
+void* CefBrowserPlatformDelegateOsr::LockFrame() {
+    CefRenderWidgetHostViewOSR* view = GetOSRHostView();
+    if (view) {
+        return view->LockFrame();
+    }
+    return nullptr;
+}
+
 void CefBrowserPlatformDelegateOsr::WasResized() {
   CefRenderWidgetHostViewOSR* view = GetOSRHostView();
   if (view) {
diff --git cef/libcef/browser/osr/browser_platform_delegate_osr.h cef/libcef/browser/osr/browser_platform_delegate_osr.h
index 5d0151361..35cd1910c 100644
--- cef/libcef/browser/osr/browser_platform_delegate_osr.h
+++ cef/libcef/browser/osr/browser_platform_delegate_osr.h
@@ -55,6 +55,8 @@ class CefBrowserPlatformDelegateOsr
   std::unique_ptr<CefMenuRunner> CreateMenuRunner() override;
   bool IsWindowless() const override;
   void WasHidden(bool hidden) override;
+  virtual void* LockFrame();
+
   bool IsHidden() const override;
   void NotifyScreenInfoChanged() override;
   void Invalidate(cef_paint_element_type_t type) override;
diff --git cef/libcef/browser/osr/render_widget_host_view_osr.cc cef/libcef/browser/osr/render_widget_host_view_osr.cc
index 01cd0549f..0e2e0413a 100644
--- cef/libcef/browser/osr/render_widget_host_view_osr.cc
+++ cef/libcef/browser/osr/render_widget_host_view_osr.cc
@@ -1606,6 +1606,10 @@ void CefRenderWidgetHostViewOSR::OnPaint(const gfx::Rect& damage_rect,
   }
 }
 
+void* CefRenderWidgetHostViewOSR::LockFrame() {
+    return video_consumer_->LockFrame();
+}
+
 void CefRenderWidgetHostViewOSR::OnAcceleratedPaint(
     const gfx::Rect& damage_rect,
     const gfx::Size& pixel_size,
diff --git cef/libcef/browser/osr/render_widget_host_view_osr.h cef/libcef/browser/osr/render_widget_host_view_osr.h
index e82f7c9d7..b53c6aaa7 100644
--- cef/libcef/browser/osr/render_widget_host_view_osr.h
+++ cef/libcef/browser/osr/render_widget_host_view_osr.h
@@ -260,6 +260,8 @@ class CefRenderWidgetHostViewOSR
                           const gfx::Size& pixel_size,
                           const CefAcceleratedPaintInfo& info);
 
+  void* LockFrame();
+
   void OnBeginFame(base::TimeTicks frame_time);
 
   bool IsPopupWidget() const {
diff --git cef/libcef/browser/osr/video_consumer_osr.cc cef/libcef/browser/osr/video_consumer_osr.cc
index 64c4d90a7..8183a4a22 100644
--- cef/libcef/browser/osr/video_consumer_osr.cc
+++ cef/libcef/browser/osr/video_consumer_osr.cc
@@ -83,6 +83,22 @@ void CefVideoConsumerOSR::RequestRefreshFrame(
   video_capturer_->RequestRefreshFrame();
 }
 
+gfx::GpuMemoryBufferHandle current_handle;
+gfx::GpuMemoryBufferHandle new_handle;
+
+void* CefVideoConsumerOSR::LockFrame() {
+    if(new_handle.is_null()) {
+        if(current_handle.is_null()) {
+            return nullptr;
+        }
+        return current_handle.dxgi_handle.Get();
+    } else {
+        current_handle = std::move(new_handle);
+        new_handle = gfx::GpuMemoryBufferHandle();
+        return current_handle.dxgi_handle.Get();
+    }
+}
+
 // Frame size values are as follows:
 //   info->coded_size = Width and height of the video frame. Not all pixels in
 //   this region are valid.
@@ -113,11 +129,14 @@ void CefVideoConsumerOSR::OnFrameCaptured(
                             : CEF_COLOR_TYPE_BGRA_8888;
 
 #if BUILDFLAG(IS_WIN)
-    auto& gmb_handle = data->get_gpu_memory_buffer_handle();
+    auto& orig_handle = data->get_gpu_memory_buffer_handle();
+    new_handle = orig_handle.Clone();
+
     cef_accelerated_paint_info_t paint_info;
-    paint_info.shared_texture_handle = gmb_handle.dxgi_handle.Get();
+    paint_info.shared_texture_handle = orig_handle.dxgi_handle.Get();
     paint_info.format = pixel_format;
     view_->OnAcceleratedPaint(content_rect, info->coded_size, paint_info);
+
 #elif BUILDFLAG(IS_APPLE)
     auto& gmb_handle = data->get_gpu_memory_buffer_handle();
     cef_accelerated_paint_info_t paint_info;
diff --git cef/libcef/browser/osr/video_consumer_osr.h cef/libcef/browser/osr/video_consumer_osr.h
index 51fe4b6cb..e29909ac5 100644
--- cef/libcef/browser/osr/video_consumer_osr.h
+++ cef/libcef/browser/osr/video_consumer_osr.h
@@ -25,6 +25,8 @@ class CefVideoConsumerOSR : public viz::mojom::FrameSinkVideoConsumer {
   void SizeChanged(const gfx::Size& size_in_pixels);
   void RequestRefreshFrame(const std::optional<gfx::Rect>& bounds_in_pixels);
 
+  void* LockFrame();
+
  private:
   // viz::mojom::FrameSinkVideoConsumer implementation.
   void OnFrameCaptured(
diff --git cef/libcef_dll/cpptoc/browser_host_cpptoc.cc cef/libcef_dll/cpptoc/browser_host_cpptoc.cc
index ffa1ba749..4b40f62e2 100644
--- cef/libcef_dll/cpptoc/browser_host_cpptoc.cc
+++ cef/libcef_dll/cpptoc/browser_host_cpptoc.cc
@@ -794,6 +794,18 @@ browser_host_add_word_to_dictionary(struct _cef_browser_host_t* self,
   CefBrowserHostCppToC::Get(self)->AddWordToDictionary(CefString(word));
 }
 
+void* CEF_CALLBACK
+browser_host_lock_frame(struct _cef_browser_host_t* self) {
+  shutdown_checker::AssertNotShutdown();
+
+  DCHECK(self);
+  if (!self) {
+    return 0;
+  }
+
+  return CefBrowserHostCppToC::Get(self)->LockFrame();
+}
+
 int CEF_CALLBACK
 browser_host_is_window_rendering_disabled(struct _cef_browser_host_t* self) {
   shutdown_checker::AssertNotShutdown();
@@ -1561,8 +1573,8 @@ CefBrowserHostCppToC::CefBrowserHostCppToC() {
   GetStruct()->get_navigation_entries = browser_host_get_navigation_entries;
   GetStruct()->replace_misspelling = browser_host_replace_misspelling;
   GetStruct()->add_word_to_dictionary = browser_host_add_word_to_dictionary;
-  GetStruct()->is_window_rendering_disabled =
-      browser_host_is_window_rendering_disabled;
+  GetStruct()->is_window_rendering_disabled = browser_host_is_window_rendering_disabled;
+  GetStruct()->lock_frame = browser_host_lock_frame;
   GetStruct()->was_resized = browser_host_was_resized;
   GetStruct()->was_hidden = browser_host_was_hidden;
   GetStruct()->notify_screen_info_changed =
diff --git cef/libcef_dll/ctocpp/browser_host_ctocpp.cc cef/libcef_dll/ctocpp/browser_host_ctocpp.cc
index 33159c2a6..79ceab424 100644
--- cef/libcef_dll/ctocpp/browser_host_ctocpp.cc
+++ cef/libcef_dll/ctocpp/browser_host_ctocpp.cc
@@ -705,6 +705,18 @@ void CefBrowserHostCToCpp::AddWordToDictionary(const CefString& word) {
   _struct->add_word_to_dictionary(_struct, word.GetStruct());
 }
 
+NO_SANITIZE("cfi-icall")
+void* CefBrowserHostCToCpp::LockFrame() {
+  shutdown_checker::AssertNotShutdown();
+
+  cef_browser_host_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, lock_frame)) {
+    return nullptr;
+  }
+
+  return _struct->lock_frame(_struct);
+}
+
 NO_SANITIZE("cfi-icall")
 bool CefBrowserHostCToCpp::IsWindowRenderingDisabled() {
   shutdown_checker::AssertNotShutdown();
diff --git cef/libcef_dll/ctocpp/browser_host_ctocpp.h cef/libcef_dll/ctocpp/browser_host_ctocpp.h
index 51068d572..f670aade4 100644
--- cef/libcef_dll/ctocpp/browser_host_ctocpp.h
+++ cef/libcef_dll/ctocpp/browser_host_ctocpp.h
@@ -90,6 +90,7 @@ class CefBrowserHostCToCpp : public CefCToCppRefCounted<CefBrowserHostCToCpp,
   void ReplaceMisspelling(const CefString& word) override;
   void AddWordToDictionary(const CefString& word) override;
   bool IsWindowRenderingDisabled() override;
+  void* LockFrame() override;
   void WasResized() override;
   void WasHidden(bool hidden) override;
   void NotifyScreenInfoChanged() override;
